package main

import "strconv"

const title = "Sveriges Radio player in HTMX"

func getProgramURL(ID int) string {
	return "/program/" + strconv.Itoa(ID)
}

templ index(program_list_item templ.Component, program_episodes templ.Component, copyright string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta name="color-scheme" content="light dark"/>
			<title>{ title }</title>
			<link rel="stylesheet" href="/static/style.css"/>
			<script src="https://unpkg.com/htmx.org@2.0.0-alpha2/dist/htmx.min.js"></script>
			<link rel="icon" href="data:;base64,iVBORw0KGgo="/>
		</head>
		<body>
			<main>
				<h1>{ title } <button onclick="toggleScheme()">ðŸŒ™</button></h1>
				Filter programs 
				<input
					type="text"
					name="searchQuery"
					hx-trigger="keyup delay:500ms"
					hx-get="/search"
					hx-swap="innerHTML transition:true"
					hx-target="#programList"
				/>
				<ul id="programList" class="transition-slide-it">
					@program_list_item
				</ul>
				<ul id="programepisodes">
					@program_episodes
				</ul>
				<footer>{ copyright }</footer>
			</main>
		</body>
		<script>
			const schemeEl = document.head.querySelector('[name="color-scheme"]');
			const toggleScheme = () => schemeEl.content = (schemeEl.content.includes(" ") ? window.matchMedia('(prefers-color-scheme: dark)').matches ? "dark" : "light" : schemeEl.content) === "dark" ? "light" : "dark";
			document.addEventListener('htmx:configRequest', (evt) => {
				evt.detail.headers['x-is-dark-mode'] = schemeEl.content === "dark"; // or 'false' depending on your dark mode status
			});

        </script>
	</html>
}

templ program_list_item(programs []Program) {
	for _, p := range programs {
		<li>
			<a
				href={ templ.URL(getProgramURL(p.ID)) }
				hx-push-url="true"
				hx-trigger="click"
				hx-get={ getProgramURL(p.ID) }
				hx-swap="innerHTML transition:true"
				hx-target="#programepisodes"
			>{ p.Name }</a>
			<span>{ p.Description }</span>
		</li>
	}
}

templ program_episodes(episodes []Episode) {
	for _, item := range episodes {
		<li>
			<h2>{ item.Title }</h2>
			<p>{ item.Description }</p>
			<div>
				<audio controls><source src={ string(item.ListenPodfile.URL) }/></audio>
				<a class="download" href={ templ.URL(item.DownloadPodfile.URL) }>â¬‡</a>
			</div>
		</li>
	}
}
